<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Answers on Ranbook Cloud</title>
    <link>https://ranbook.cloud/answers/</link>
    <description>Recent content in Answers on Ranbook Cloud</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jan 2025 17:52:55 -0400</lastBuildDate>
    <atom:link href="https://ranbook.cloud/answers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java8 Alpine Dockerfile Curl</title>
      <link>https://ranbook.cloud/answers/java8-dockerfile-curl/</link>
      <pubDate>Sat, 03 Aug 2024 17:27:06 -0400</pubDate>
      <guid>https://ranbook.cloud/answers/java8-dockerfile-curl/</guid>
      <description>As of Alpine Linux 3.3 there exists a new --no-cache option for apk. It allows users to install packages with an index that is updated and used on-the-fly and not cached locally:
FROM openjdk:8-jre-alpine RUN apk --no-cache add curl This avoids the need to use --update and remove /var/cache/apk/* when done installing packages.
Reference - https://github.com/gliderlabs/docker-alpine/blob/master/docs/usage.md</description>
    </item>
    <item>
      <title>Spring Boot Dynamic Beans Example</title>
      <link>https://ranbook.cloud/answers/spring-boot-dynamic-beans/</link>
      <pubDate>Thu, 02 Jan 2025 17:52:55 -0400</pubDate>
      <guid>https://ranbook.cloud/answers/spring-boot-dynamic-beans/</guid>
      <description>You can create dynamic &amp;amp; configuration driven beans in Spring Boot in following way.
Note: Below example full code is available at https://github.com/imran9m/spring-boot-dynamic-beans
For the example, Let&amp;rsquo;s create dynamic RestClient beans with customized connection timeout and user-agent configuration to use anywhere we want.
Let&amp;rsquo;s go with following configuration to manage customized properties for two dynamic RestClient beans. application.yml
restClients: clients: - clientName: test1 connectionTimeout: 6000 responseTimeout: 6000 userAgent: test1 - clientName: test2 connectionTimeout: 5000 responseTimeout: 5000 userAgent: test2 Now, let&amp;rsquo;s load this configuration into custom configuration properties record.</description>
    </item>
    <item>
      <title>Fluentd Conditional Matches Based on Environment Variables</title>
      <link>https://ranbook.cloud/answers/fluentd-conditional-matches/</link>
      <pubDate>Mon, 18 Nov 2024 17:42:19 -0400</pubDate>
      <guid>https://ranbook.cloud/answers/fluentd-conditional-matches/</guid>
      <description>You can enable/disable FluentD Matches with environment variables in following way.
Below is fluent.conf.
&amp;lt;source&amp;gt; @type dummy dummy {&amp;#34;hello&amp;#34;:&amp;#34;world&amp;#34;} @label @DUMMY tag dummy &amp;lt;/source&amp;gt; &amp;lt;label @DUMMY&amp;gt; &amp;lt;match dummy&amp;gt; @type copy copy_mode deep &amp;lt;store&amp;gt; @type relabel @label @OPENSEARCH &amp;lt;/store&amp;gt; &amp;lt;store&amp;gt; @type relabel @label @ELASTICSEARCH &amp;lt;/store&amp;gt; &amp;lt;/match&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;label @OPENSEARCH&amp;gt; @include &amp;#34;#{ENV[&amp;#39;FLUENTD_OPENSEARCH&amp;#39;]}&amp;#34; &amp;lt;/label&amp;gt; &amp;lt;label @ELASTICSEARCH&amp;gt; @include &amp;#34;#{ENV[&amp;#39;FLUENTD_ELASTICSEARCH&amp;#39;]}&amp;#34; &amp;lt;/label&amp;gt; Following is the content for fluent-elasticsearch.conf. For testing purpose, we will send events to stdout.</description>
    </item>
    <item>
      <title>Get PublicIP of ECS Fargate Task with AWS Java SDK</title>
      <link>https://ranbook.cloud/answers/aws-java-sdk-public-ip/</link>
      <pubDate>Sat, 03 Aug 2024 17:52:55 -0400</pubDate>
      <guid>https://ranbook.cloud/answers/aws-java-sdk-public-ip/</guid>
      <description>You will need to make multiple AWS API calls to get Public IPv4 address. Here are the steps.
Once you perform taskRun operation. Keep taskFullArn from Output. With above taskArn and cluster name, make describeTasks operation call. Example -
AmazonECS client = AmazonECSClientBuilder.standard().build(); DescribeTasksRequest request = new DescribeTasksRequest().withTasks(&amp;#34;c5cba4eb-5dad-405e-96db-71ef8eefe6a8&amp;#34;); DescribeTasksResult response = client.describeTasks(request); Above API will give you a response with network attachment details. &amp;#34;attachments&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;xxxxx-d02c-4a9d-ae79-xxxxxxx&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;ElasticNetworkInterface&amp;#34;, &amp;#34;status&amp;#34;: &amp;#34;ATTACHED&amp;#34;, &amp;#34;details&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;subnetId&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;subnet-xxxxx&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;networkInterfaceId&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;eni-e5aa89a3&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;macAddress&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;xxxxx&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;privateIPv4Address&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;172.</description>
    </item>
    <item>
      <title>Fluentd Multiple Filters Matches for Same Source</title>
      <link>https://ranbook.cloud/answers/fluentd-filters-matches/</link>
      <pubDate>Sat, 03 Aug 2024 17:42:19 -0400</pubDate>
      <guid>https://ranbook.cloud/answers/fluentd-filters-matches/</guid>
      <description>You can try using plugins copy and relabel to achieve this. Example configuration looks like this.
//One Source &amp;lt;source&amp;gt; @type tail tag service path /tmp/l.log format json read_from_head true &amp;lt;/source&amp;gt; //Now Copy Source Events to 2 Labels &amp;lt;match service&amp;gt; @type copy &amp;lt;store&amp;gt; @type relabel @label @data &amp;lt;/store&amp;gt; &amp;lt;store&amp;gt; @type relabel @label @pi2 &amp;lt;/store&amp;gt; &amp;lt;/match&amp;gt; //@data Label, you can perform desired filter and output file &amp;lt;label @data&amp;gt; &amp;lt;filter service&amp;gt; ... &amp;lt;/filter&amp;gt; &amp;lt;match service&amp;gt; @type file path /tmp/out/data &amp;lt;/match&amp;gt; &amp;lt;/label&amp;gt; //@pi2 Label, you can perform desired filter and output file &amp;lt;label @pi2&amp;gt; &amp;lt;filter service&amp;gt; .</description>
    </item>
  </channel>
</rss>
