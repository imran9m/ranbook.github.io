<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dotnet on Ranbook Cloud</title>
    <link>https://ranbook.cloud/tags/dotnet/</link>
    <description>Recent content in Dotnet on Ranbook Cloud</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Aug 2024 17:27:06 -0400</lastBuildDate>
    <atom:link href="https://ranbook.cloud/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gracefully Handle DotNetCore Docker Container Termination</title>
      <link>https://ranbook.cloud/answers/dotnet-docker-graceful-termination/</link>
      <pubDate>Sat, 17 Aug 2024 17:27:06 -0400</pubDate>
      <guid>https://ranbook.cloud/answers/dotnet-docker-graceful-termination/</guid>
      <description>Inorder to gracefully stop a .NET Core Docker Container, below is the sample console app code.
using System; using System.Runtime.Loader; using System.Threading; namespace consoleapp { class Program { static void Main(string[] args) { var _quitEvent = new ManualResetEvent(false); AssemblyLoadContext.Default.Unloading += ctx =&amp;gt; { System.Console.WriteLine(&amp;#34;Unloding fired&amp;#34;); _quitEvent.Set(); }; System.Console.WriteLine(&amp;#34;Waiting for signals&amp;#34;); _quitEvent.WaitOne(); System.Console.WriteLine(&amp;#34;Received signal gracefully shutting down&amp;#34;); Console.WriteLine(&amp;#34;Hello World!&amp;#34;); } } } Sample Logs you should see for container.
Waiting for signals Unloding fired Received signal gracefully shutting down Hello World!</description>
    </item>
  </channel>
</rss>
